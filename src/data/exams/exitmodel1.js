const exitModel1 = {
  id: 'exitExamModel1',
  title: 'Exit Model 1',
  year: 2023,
  type: 'model',
  image: 'moe.png',
  questions: [
    {
      id: '1',
      text: 'What is the value of p after executing: p = (x++ * y--) + ++z with x=1, y=10, z=-3?',
      options: ['22', '17', '8', '16'],
      correctAnswerIndex: 2,
      explanation:
        'Post-increment x=1 (then becomes 2), pre-increment z=-2, y=10 (then 9). Calculation: (1*10) + (-2) = 8',
    },
    {
      id: '2',
      text: 'What happens when pointers p=&a and q=&b are assigned as p=q?',
      options: [
        'p points to b',
        'a assigned to b',
        'b assigned to a',
        'q points to a',
      ],
      correctAnswerIndex: 0,
      explanation:
        'Pointer assignment makes p reference the same memory as q (which points to b)',
    },
    {
      id: '3',
      text: 'What demonstrates C++ case sensitivity?',
      options: [
        'All variables are identifiers',
        'Requires iostream.h',
        'ExitExam ≠ exitExam',
        'Statements end with semicolon',
      ],
      correctAnswerIndex: 2,
      explanation:
        'Case sensitivity means uppercase/lowercase letters are distinct',
    },
    {
      id: '4',
      text: 'What is true about a=b assignment?',
      options: [
        'Values become equal',
        'b assigned to a with future linkage',
        'Values swap',
        'b assigned to a independently',
      ],
      correctAnswerIndex: 3,
      explanation:
        'Assignment copies value at that moment without creating reference',
    },
    {
      id: '5',
      text: 'True statement about algorithms:',
      options: [
        'Allows ambiguous steps',
        'Cannot solve complex problems',
        'May lack start/end',
        'Must finish in finite time',
      ],
      correctAnswerIndex: 3,
      explanation: 'Key algorithm property: must terminate after finite steps',
    },
    {
      id: '6',
      text: 'Which does NOT increment i by 1?',
      options: ['i+=1', 'i=i+1', 'i=i+i', 'i++'],
      correctAnswerIndex: 2,
      explanation: 'i=i+i doubles current value rather than incrementing by 1',
    },
    {
      id: '7',
      text: 'Pointer assignment p=q with p=&a, q=&b results in:',
      options: [
        'p points to b',
        'b assigned to a',
        'a assigned to b',
        'q points to a',
      ],
      correctAnswerIndex: 0,
      explanation: 'p now references what q references (memory address of b)',
    },

    // Object Oriented Programming (Q8-13)
    {
      id: '8',
      text: 'Class C (B→A inheritance) can access:',
      options: [
        'C data + A/B protected/public',
        'Only C/B protected/default/public',
        'C data + A/B public only',
        'Only C protected/default/public',
      ],
      correctAnswerIndex: 0,
      explanation:
        'Public inheritance allows access to base class protected/public members',
    },
    {
      id: '9',
      text: 'How to call non-static Java methods?',
      options: [
        'Methodname()',
        'Classname.methodname()',
        'Objectname.methodname()',
        'Variablename.methodname()',
      ],
      correctAnswerIndex: 2,
      explanation: 'Non-static methods require object instance for invocation',
    },
    {
      id: '10',
      text: 'Overridden method call from subclass:',
      options: [
        'Random selection',
        'Always uses subclass version',
        'Compile error',
        'Always uses superclass version',
      ],
      correctAnswerIndex: 1,
      explanation:
        'Method overriding ensures subclass implementation is called',
    },
    {
      id: '11',
      text: 'Incorrect statement about access modifiers:',
      options: [
        'Private members inaccessible to same class',
        'Public members accessible everywhere',
        'Private members inaccessible to subclasses',
        'Protected members accessible to subclasses',
      ],
      correctAnswerIndex: 0,
      explanation: 'Private members ARE accessible within their own class',
    },
    {
      id: '12',
      text: 'Using one object in multiple forms is called:',
      options: ['Inheritance', 'Interface', 'Encapsulation', 'Polymorphism'],
      correctAnswerIndex: 3,
      explanation: 'Polymorphism enables objects to take multiple forms',
    },
    {
      id: '13',
      text: 'Correct Java object creation:',
      options: [
        'Student(3983,20)',
        'Student stud',
        'new Student()',
        'new Student(3983,2)',
      ],
      correctAnswerIndex: 2,
      explanation: 'Default constructor requires no arguments in this case',
    },

    // Design and Analysis of Algorithm (Q14-20)
    {
      id: '14',
      text: 'Measuring algorithm space efficiency involves:',
      options: [
        'Maximum memory required',
        'Average memory',
        'Minimum memory',
        'Maximum disk space',
      ],
      correctAnswerIndex: 0,
      explanation: 'Worst-case memory usage determines space complexity',
    },
    {
      id: '15',
      text: 'Two main algorithm efficiency measures:',
      options: [
        'Processor/memory',
        'Data/space',
        'Complexity/capacity',
        'Time/space',
      ],
      correctAnswerIndex: 3,
      explanation: 'Time and space complexity are primary metrics',
    },
    {
      id: '16',
      text: 'Best time complexity for all-pairs shortest paths:',
      options: ['O(n²)', 'O(n³)', 'O(n)', 'O(n⁴)'],
      correctAnswerIndex: 1,
      explanation: 'Floyd-Warshall algorithm achieves O(n³)',
    },
    {
      id: '17',
      text: 'Optimal binary search tree time complexity:',
      options: ['O(n)', 'O(n²)', 'O(log n)', 'O(n!)'],
      correctAnswerIndex: 2,
      explanation: 'Balanced BST provides logarithmic search time',
    },
    {
      id: '18',
      text: 'Space complexity of n-level recursive algorithm:',
      options: ['O(n²)', 'O(n)', 'O(1)', 'O(log n)'],
      correctAnswerIndex: 1,
      explanation: 'Each recursion level adds to call stack space',
    },
    {
      id: '19',
      text: 'Best-case time complexity of linear search:',
      options: ['O(n²)', 'O(n)', 'O(1)', 'O(log n)'],
      correctAnswerIndex: 2,
      explanation: 'Item found immediately at first position',
    },
    {
      id: '20',
      text: 'Queue removal order for 1,2,3,4 insertion:',
      options: ['4321', '3241', '1234', 'None'],
      correctAnswerIndex: 2,
      explanation: 'Queues follow FIFO (First-In-First-Out) order',
    },

    // Data Structure and Algorithm (Q21-26)
    {
      id: '21',
      text: 'Array data structure disadvantage:',
      options: [
        'Fixed size requirement',
        'Constant-time access',
        'Contiguous memory',
        'Foundation for other structures',
      ],
      correctAnswerIndex: 0,
      explanation: 'Arrays require predefined size allocation',
    },
    {
      id: '22',
      text: 'Maximum swaps in Selection Sort:',
      options: ['n-1', '1', 'n', 'n-2'],
      correctAnswerIndex: 0,
      explanation: 'Each iteration places one element in final position',
    },
    {
      id: '23',
      text: 'Time complexity to insert at end of linked list:',
      options: ['O(1)', 'O(n log n)', 'O(n)', 'O(log n)'],
      correctAnswerIndex: 2,
      explanation: 'Requires traversal from head to tail node',
    },
    {
      id: '24',
      text: 'Data structure for infix-to-prefix conversion:',
      options: ['Stack', 'Queue', 'Binary tree', 'Linked list'],
      correctAnswerIndex: 0,
      explanation: 'Stack handles operator precedence during conversion',
    },
    {
      id: '25',
      text: 'Process of adding to stack:',
      options: ['Insert', 'Add', 'Push', 'None'],
      correctAnswerIndex: 2,
      explanation: 'Standard stack operation terminology',
    },
    {
      id: '26',
      text: 'Divide and Conquer algorithm example:',
      options: ['Merge Sort', 'Heap Sort', 'Selection Sort', 'Bubble Sort'],
      correctAnswerIndex: 0,
      explanation:
        'Merge Sort recursively divides the problem into subproblems',
    },

    // Database System (Q27-30)
    {
      id: '27',
      text: 'Multiple logically related databases over network:',
      options: [
        'Data Fragmentation',
        'Distributed Database',
        'Data Allocation',
        'Data Replication',
      ],
      correctAnswerIndex: 1,
      explanation: 'Definition of distributed database systems',
    },
    {
      id: '28',
      text: 'Transaction executing completely or not at all:',
      options: ['Consistency', 'Durability', 'Isolation', 'Atomicity'],
      correctAnswerIndex: 3,
      explanation: 'ACID property: Atomicity ensures all-or-nothing execution',
    },
    {
      id: '29',
      text: 'Language for database schema definition:',
      options: ['DML', 'DDL', 'TCL', 'DCL'],
      correctAnswerIndex: 1,
      explanation: 'DDL (Data Definition Language) creates/modifies structure',
    },
    {
      id: '30',
      text: 'Table can have only one:',
      options: ['Unique Key', 'Candidate key', 'Primary key', 'Foreign key'],
      correctAnswerIndex: 2,
      explanation: 'Primary key uniquely identifies each record',
    },
    {
      id: '31',
      text: 'Checkpoints are part of:',
      options: ['Recovery', 'Concurrency', 'Authorization', 'Security'],
      correctAnswerIndex: 0,
      explanation: 'Checkpoints facilitate database recovery processes',
    },
    {
      id: '32',
      text: 'Foreign key must match existing primary key:',
      options: [
        'Domain Integrity',
        'Referential Integrity',
        'Transitive Dependency',
        'Entity Integrity',
      ],
      correctAnswerIndex: 1,
      explanation: 'Referential integrity maintains key relationships',
    },
    {
      id: '33',
      text: 'Not a DBMS feature:',
      options: [
        'ACID Support',
        'Single-user Only',
        'High Security',
        'Minimal Duplication',
      ],
      correctAnswerIndex: 1,
      explanation: 'DBMS typically support multiple concurrent users',
    },
    {
      id: '34',
      text: 'Not a database function:',
      options: [
        'Code Analysis',
        'Backup/Recovery',
        'Data Manipulation',
        'Data Storage',
      ],
      correctAnswerIndex: 0,
      explanation: 'Databases manage data, not analyze programming code',
    },
    {
      id: '35',
      text: 'Not a recovery technique:',
      options: [
        'ARIES',
        'Two-phase Commit',
        'Immediate Update',
        'Deferred Update',
      ],
      correctAnswerIndex: 1,
      explanation: 'Two-phase commit is a concurrency control protocol',
    },
    {
      id: '36',
      text: 'Incorrect OODBMS statement:',
      options: [
        'Objects are key',
        'Objects persist',
        'Relations are key',
        'Object IDs immutable',
      ],
      correctAnswerIndex: 2,
      explanation: 'OODBMS focuses on objects, not relational tables',
    },
    {
      id: '37',
      text: 'Query optimization using operation ordering:',
      options: [
        'Semantic Query',
        'Heuristic-based',
        'Cost Estimation',
        'Exhaustive Search',
      ],
      correctAnswerIndex: 1,
      explanation: 'Heuristics often rearrange operation sequences',
    },
    {
      id: '38',
      text: 'Correct MANY-TO-ONE relationship:',
      options: [
        'Building-Location',
        'Employee-Department',
        'Hospital-Patient',
        'Author-Book',
      ],
      correctAnswerIndex: 1,
      explanation: 'Many employees belong to one department',
    },

    // Software Engineering (Q39-44)
    {
      id: '39',
      text: 'System decomposition NOT influenced by:',
      options: ['Coupling', 'Functionality', 'Cohesion', 'User Thoughts'],
      correctAnswerIndex: 3,
      explanation: 'Technical factors drive decomposition, not user opinions',
    },
    {
      id: '40',
      text: 'Functional model represented by:',
      options: [
        'Use Case Diagram',
        'State Diagram',
        'Class Diagram',
        'Object Diagram',
      ],
      correctAnswerIndex: 0,
      explanation: 'Use cases capture functional requirements',
    },
    {
      id: '41',
      text: 'False software engineering concept:',
      options: [
        'Analysis focuses on user view',
        'Design focuses on developer view',
        'Analysis produces subsystem decomposition',
        'Elicitation only considers user view',
      ],
      correctAnswerIndex: 2,
      explanation: 'Subsystem decomposition occurs during design phase',
    },
    {
      id: '42',
      text: 'Not used to identify Entity objects:',
      options: [
        'Real-world entities',
        'Real-world activities',
        'Forms',
        'Data sources',
      ],
      correctAnswerIndex: 2,
      explanation: 'Forms are UI elements, not domain entities',
    },
    {
      id: '43',
      text: 'Heat sensor detecting intrusion is:',
      options: [
        'Functional Requirement',
        'Non-Functional',
        'Constraint',
        'Known Requirement',
      ],
      correctAnswerIndex: 0,
      explanation: 'Describes what the system should do',
    },
    {
      id: '44',
      text: 'Used for identifying Actors:',
      options: [
        'Use case dependencies',
        'Accessed information',
        'User groups performing functions',
        'Requested tasks',
      ],
      correctAnswerIndex: 2,
      explanation: 'Actors represent user roles interacting with system',
    },

    // Web Programming (Q45-53)
    {
      id: '45',
      text: 'PHP function for SSL MySQL connection:',
      options: [
        'mysqli_ssl_connect()',
        'pdo_connect_ssl()',
        'mysql_ssl_connect()',
        'secure_connect()',
      ],
      correctAnswerIndex: 0,
      explanation: 'Official MySQLi function for SSL connections',
    },
    {
      id: '46',
      text: 'JavaScript alert dialog function:',
      options: ['console.log()', 'confirm()', 'alert()', 'prompt()'],
      correctAnswerIndex: 2,
      explanation: 'Basic browser alert mechanism',
    },
    {
      id: '47',
      text: 'JavaScript element selection by ID:',
      options: [
        'getElementById()',
        'getElementByTag()',
        'getElementByName()',
        'getElementByClass()',
      ],
      correctAnswerIndex: 0,
      explanation: 'Standard DOM access method',
    },
    {
      id: '48',
      text: 'Language for web page interactivity:',
      options: ['HTML', 'PHP', 'CSS', 'JavaScript'],
      correctAnswerIndex: 3,
      explanation: 'JavaScript enables dynamic client-side behavior',
    },
    {
      id: '49',
      text: 'Language defining web page structure:',
      options: ['HTML', 'JavaScript', 'PHP', 'CSS'],
      correctAnswerIndex: 0,
      explanation: 'HTML provides structural markup',
    },
    {
      id: '50',
      text: 'PHP file existence check:',
      options: [
        'file_exists()',
        'file_exists_check()',
        'is_file()',
        'file_check()',
      ],
      correctAnswerIndex: 0,
      explanation: 'Standard filesystem function',
    },
    {
      id: '51',
      text: 'PHP function for affected SQL rows:',
      options: [
        'num_rows()',
        'row_count()',
        'affected_rows()',
        'get_affected_rows()',
      ],
      correctAnswerIndex: 2,
      explanation: 'MySQLi/PDO method for changed rows',
    },
    {
      id: '52',
      text: 'PHP server/environment superglobal:',
      options: ['S_POST', 'S|_SESSION', 'S|_GET', 'S_SERVER'],
      correctAnswerIndex: 3,
      explanation: 'Contains server and execution environment information',
    },
    {
      id: '53',
      text: 'PHP POST form data superglobal:',
      options: ['S|_REQUEST', 'S|_GET', 'S|_POST', 'S|_SERVER'],
      correctAnswerIndex: 2,
      explanation: 'Stores data from POST method form submissions',
    },

    // Artificial Intelligence (Q54-59)
    {
      id: '54',
      text: 'Agent with condition-action rules + memory:',
      options: [
        'Simple reflex',
        'Model-based reflex',
        'Goal-based',
        'Utility-based',
      ],
      correctAnswerIndex: 1,
      explanation: 'Model-based agents maintain internal state',
    },
    {
      id: '55',
      text: 'ML technique for categorizing institutions:',
      options: [
        'Reinforcement Learning',
        'Regression',
        'Classification',
        'Clustering',
      ],
      correctAnswerIndex: 3,
      explanation:
        'Clustering groups similar instances without predefined labels',
    },
    {
      id: '56',
      text: 'AI definition focusing on action sequences:',
      options: [
        'Acts humanly',
        'Thinks humanly',
        'Acts rationally',
        'Thinks rationally',
      ],
      correctAnswerIndex: 2,
      explanation: 'Rational agents optimize action sequences for goals',
    },
    {
      id: '57',
      text: 'Algorithm completeness means:',
      options: [
        'Finds best goal state',
        'Measures storage needs',
        'Counts search steps',
        'Guarantees solution if exists',
      ],
      correctAnswerIndex: 3,
      explanation: 'Completeness guarantees solution discovery when possible',
    },
    {
      id: '58',
      text: 'AI view concerned with thought processes:',
      options: [
        'Complete autonomy',
        'Thinking humanly/rationally',
        'Acting humanly/rationally',
        'Omniscient acting',
      ],
      correctAnswerIndex: 1,
      explanation: 'Cognitive modeling approaches',
    },
    {
      id: '59',
      text: 'False AI validation statement:',
      options: [
        'Turing test validates human-like acting',
        'Rational acting validated by performance',
        'Human-like thinking validation impossible',
        'Rational thinking validated by logic',
      ],
      correctAnswerIndex: 2,
      explanation: 'Cognitive science provides validation methods',
    },

    // Automata and Complexity Theory (Q60-65)
    {
      id: '60',
      text: 'Ambiguous CFG has:',
      options: [
        'Single parse tree',
        'No parse tree',
        'Partial parse tree',
        'Multiple parse trees',
      ],
      correctAnswerIndex: 3,
      explanation: 'Ambiguity means multiple valid interpretations',
    },
    {
      id: '61',
      text: 'CFG S→aS | ε equivalent to:',
      options: ['a*', '(a+b)*', 'a(a+b)*', 'a+'],
      correctAnswerIndex: 0,
      explanation: "Produces any number of a's (including empty string)",
    },
    {
      id: '62',
      text: 'Pushdown automaton uses:',
      options: ['Linked List', 'Stack', 'Hash Table', 'Queue'],
      correctAnswerIndex: 1,
      explanation: 'PDA extends FSA with stack memory',
    },
    {
      id: '63',
      text: 'Machine equivalent to regular grammar:',
      options: [
        'Pushdown automata',
        'Linear bounded automata',
        'Finite automata',
        'Turing Machine',
      ],
      correctAnswerIndex: 2,
      explanation: 'Regular languages recognized by finite automata',
    },
    {
      id: '64',
      text: 'For CFG production a→b:',
      options: ['a∈(V+∑)', 'a∈V', 'a∈(V+∑)*', 'b∈(V+∑)*'],
      correctAnswerIndex: 3,
      explanation:
        'Right-hand side can be any combination of terminals/non-terminals',
    },
    {
      id: '65',
      text: 'Regular expression for given finite automaton:',
      options: [
        '(a+b)ab(ab+bb+a(a+b)ab)*',
        'a^ab(ab+bb+a(a+b)ab)*',
        'a^a(b)ab(ab+bb+a(a+b)ab)',
        '(aa^a(b)ab)*',
      ],
      correctAnswerIndex: 0,
      explanation: "Matches the automaton's language structure",
    },

    // Compiler Design (Q66-71)
    {
      id: '66',
      text: 'Replacing runtime with compile-time computations:',
      options: [
        'Peephole optimization',
        'Constant folding',
        'Invariant computation',
        'Code hoisting',
      ],
      correctAnswerIndex: 1,
      explanation: 'Evaluating constant expressions during compilation',
    },
    {
      id: '67',
      text: 'Compiler translates source code to:',
      options: ['Binary code', 'Executable code', 'Both', 'Machine code'],
      correctAnswerIndex: 2,
      explanation: 'May produce intermediate or final executable forms',
    },
    {
      id: '68',
      text: 'Grammar type for synthesized attributes:',
      options: ['Ambiguous', 'LR', 'LL', 'None'],
      correctAnswerIndex: 1,
      explanation: 'LR grammars support attribute computation',
    },
    {
      id: '69',
      text: 'Regular expression for identifier:',
      options: [
        'Letter(letter+|digit*)*',
        'Letter(letter|digit)+',
        'Letter(letter|digit)*',
        'Letter(letter_digit)*',
      ],
      correctAnswerIndex: 2,
      explanation:
        'Standard identifier pattern: letter followed by letters/digits',
    },
    {
      id: '70',
      text: 'Finding parse tree for token string:',
      options: ['Recognizing', 'Parsing', 'Tokenizing', 'Analyzing'],
      correctAnswerIndex: 1,
      explanation: 'Parsing constructs syntactic structure',
    },
    {
      id: '71',
      text: 'Processing source into syntactic classes:',
      options: [
        'Interpretation',
        'Lexical analysis',
        'Syntax analysis',
        'General analysis',
      ],
      correctAnswerIndex: 1,
      explanation: 'Lexer/tokenizer identifies language tokens',
    },

    // Computer Security (Q72-77)
    {
      id: '72',
      text: 'Not an integrity property:',
      options: [
        'Compromised by deception',
        'Compromised by disclosure',
        'Authorized modifications',
        'Prevents active attacks',
      ],
      correctAnswerIndex: 1,
      explanation: 'Disclosure violates confidentiality, not integrity',
    },
    {
      id: '73',
      text: 'Airport verifying identity with passport:',
      options: ['Authentication', 'Authorization', 'Access control', 'All'],
      correctAnswerIndex: 0,
      explanation: 'Verifying claimed identity',
    },
    {
      id: '74',
      text: 'ATM PIN interception compromises:',
      options: [
        'Integrity',
        'Authorization',
        'Confidentiality',
        'Availability',
      ],
      correctAnswerIndex: 2,
      explanation: 'Unauthorized information disclosure',
    },
    {
      id: '75',
      text: 'Attack for monitoring children:',
      options: ['Spyware', 'Ransomware', 'Worms', 'Adware'],
      correctAnswerIndex: 0,
      explanation: 'Spyware secretly monitors activity',
    },
    {
      id: '76',
      text: 'Data link layer attack:',
      options: ['ARP spoofing', 'DNS spoofing', 'SYN-FLOOD', 'All except c'],
      correctAnswerIndex: 3,
      explanation: 'SYN-FLOOD is transport layer (TCP) attack',
    },
    {
      id: '77',
      text: 'True about worms vs viruses:',
      options: [
        'Worms need host',
        'Worms need user action',
        'Viruses need host',
        'Worms slower',
      ],
      correctAnswerIndex: 2,
      explanation: 'Viruses attach to host files; worms self-propagate',
    },

    // Data Communication and Networking (Q78-83)
    {
      id: '78',
      text: 'Class-B first octet bit pattern:',
      options: ['110XXXXX', '1110XXXX', '10XXXXXX', '0XXXXXXX'],
      correctAnswerIndex: 2,
      explanation: 'Class B: 10xxxxxx (128-191)',
    },
    {
      id: '79',
      text: 'OSI layer for flow control:',
      options: ['Application', 'Transport', 'Session', 'Presentation'],
      correctAnswerIndex: 1,
      explanation: 'Transport layer manages end-to-end flow control',
    },
    {
      id: '80',
      text: 'Physical layer device:',
      options: ['Bridge', 'Router', 'Switch', 'Hub'],
      correctAnswerIndex: 3,
      explanation: 'Hub operates at physical layer only',
    },
    {
      id: '81',
      text: 'Remote site subnetting for 2x100 hosts:',
      options: [
        '192.168.10.0/25 and 192.168.10.128/25',
        '192.168.10.0/30 and 192.168.10.128/30',
        '192.168.10.64/26 and 192.168.10.192/26',
        '192.168.10.32/28 and 192.168.10.64/28',
      ],
      correctAnswerIndex: 0,
      explanation: '/25 provides 126 hosts per subnet (sufficient for 100)',
    },
    {
      id: '82',
      text: 'Main site subnetting for 100/60/29 hosts:',
      options: [
        '192.168.15.0/25, .128/26, .192/27',
        '192.168.15.0/26, .128/26, .192/29',
        '192.168.15.0/27, .128/26, .192/25',
        '192.168.15.0/100, .128/60, .192/29',
      ],
      correctAnswerIndex: 0,
      explanation: 'Proper CIDR allocation for varying host counts',
    },
    {
      id: '83',
      text: 'WAN link address conservation:',
      options: [
        '192.168.11.240/27',
        '192.168.11.240/28',
        '192.168.11.240/29',
        '192.168.11.240/30',
      ],
      correctAnswerIndex: 3,
      explanation:
        '/30 provides exactly 2 host addresses for point-to-point link',
    },

    // Network and System Admin (Q84-89)
    {
      id: '84',
      text: 'Getting IP from hostname:',
      options: [
        'Forward resolution',
        'Backward resolution',
        'Binding',
        'Resolving',
      ],
      correctAnswerIndex: 0,
      explanation: 'Hostname→IP is forward DNS lookup',
    },
    {
      id: '85',
      text: 'Tool to find Facebook server IP:',
      options: ['nslookup', 'ping', 'traceroute', 'netstat'],
      correctAnswerIndex: 0,
      explanation: 'nslookup queries DNS records',
    },
    {
      id: '86',
      text: 'NAT usage scenario:',
      options: [
        'No default gateway',
        'Global IP in LAN',
        'Unknown IP type',
        'Private IP in LAN',
      ],
      correctAnswerIndex: 3,
      explanation: 'NAT translates private→public addresses',
    },
    {
      id: '87',
      text: 'DHCP recommended when:',
      options: [
        'Few network users',
        'Fixed-purpose devices',
        'Complex device count',
        'All correct',
      ],
      correctAnswerIndex: 2,
      explanation: 'DHCP automates IP management in large networks',
    },
    {
      id: '88',
      text: 'Server handling HTTP requests:',
      options: ['HTTP Server', 'Web Server', 'FTP Server', 'DNS Server'],
      correctAnswerIndex: 1,
      explanation: 'Web servers process HTTP/HTTPS protocols',
    },
    {
      id: '89',
      text: 'Device monitoring network traffic:',
      options: ['Proxy', 'Firewall', 'Gateway', 'Router'],
      correctAnswerIndex: 1,
      explanation: 'Firewalls inspect and filter traffic',
    },

    // Operating System (Q90-95)
    {
      id: '90',
      text: 'Process termination causes:',
      options: [
        'Killed by another',
        'Normal exit',
        'All mentioned',
        'Fatal error',
      ],
      correctAnswerIndex: 2,
      explanation: 'Processes can end in various ways',
    },
    {
      id: '91',
      text: 'OS service access interface:',
      options: ['Library', 'System calls', 'Assembly', 'API'],
      correctAnswerIndex: 1,
      explanation: 'System calls bridge user space and kernel',
    },
    {
      id: '92',
      text: 'CPU control transfer to scheduled process:',
      options: ['Interrupt', 'Dispatcher', 'Scheduler', 'None'],
      correctAnswerIndex: 1,
      explanation: 'Dispatcher handles context switching',
    },
    {
      id: '93',
      text: 'Deadlock required condition:',
      options: [
        'Mutual exclusion',
        'All mentioned',
        'Hold-and-wait',
        'No preemption',
      ],
      correctAnswerIndex: 1,
      explanation: 'All four conditions must hold',
    },
    {
      id: '94',
      text: 'First-come-first-served scheduling:',
      options: ['FCFS', 'Priority', 'Shortest job', 'None'],
      correctAnswerIndex: 0,
      explanation: 'Basic non-preemptive scheduling',
    },
    {
      id: '95',
      text: 'Incorrect kernel statement:',
      options: [
        'First loaded during boot',
        'Modules unloadable during runtime',
        'Core OS component',
        'Resides in memory',
      ],
      correctAnswerIndex: 1,
      explanation: 'Many kernels support dynamic module loading',
    },

    // Computer Architecture (Q96-101)
    {
      id: '96',
      text: 'Fetch/decode during execution called:',
      options: ['Super-scaling', 'None', 'Parallel computation', 'Pipelining'],
      correctAnswerIndex: 3,
      explanation: 'Instruction pipeline overlaps stages',
    },
    {
      id: '97',
      text: 'Conditional next-instruction jump:',
      options: ['Branch', 'Return', 'Skip', 'Jump'],
      correctAnswerIndex: 2,
      explanation: 'Skip instructions conditionally advance PC',
    },
    {
      id: '98',
      text: 'Interrupt from divide-by-zero:',
      options: ['None', 'Software', 'External', 'Internal'],
      correctAnswerIndex: 3,
      explanation: 'Processor-generated (internal) exception',
    },
    {
      id: '99',
      text: 'Address bus directionality:',
      options: ['Unidirectional', 'None', 'Multidirectional', 'Bidirectional'],
      correctAnswerIndex: 0,
      explanation: 'CPU sends addresses one-way to memory',
    },
    {
      id: '100',
      text: 'Two-part instruction format specifies:',
      options: ['Operation + address', 'Output', 'Input', 'Operand'],
      correctAnswerIndex: 0,
      explanation: 'Opcode + operand address format',
    },
  ],
}

export default exitModel1
